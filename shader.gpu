// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
attribute vec2 textureCoords;

uniform mat4 ModelViewProjectionMatrix, normalMatrix;
uniform mat4 ModelViewMatrix, ProjectionMatrix;

uniform float shininess;
uniform vec3 ambientColor;
uniform vec3 diffuseColor;
uniform vec3 specularColor;
uniform vec3 lightPosition;

uniform float fAngleRad;
uniform vec2 fUserPoint;

varying vec4 color;
varying vec2 vTextureCoords;
uniform vec4 colorU;

mat4 getRotateMat(float angleRad) {
    float c = cos(angleRad);
    float s = sin(angleRad);

    return mat4(
        vec4(c, s, 0.0, 0.0),
        vec4(-s, c, 0.0, 0.0),
        vec4(0.0, 0.0, 1.0, 0.0),
        vec4(0.0, 0.0, 0.0, 1.0)
    );
}

mat4 getTranslateMat(vec2 point) {
    return mat4(
        vec4(1.0, 0.0, 0.0, point.x),
        vec4(0.0, 1.0, 0.0, point.y),
        vec4(0.0, 0.0, 1.0, 0.0),
        vec4(0.0, 0.0, 0.0, 1.0)
    );
}

void main() {
    vec4 vertPos4 = ModelViewMatrix * vec4(vertex, 1.0);
    vec3 vertPos = vec3(vertPos4) / vertPos4.w;
    vec3 normalInterp = vec3(normalMatrix * vec4(normal, 0.0));
    gl_Position = ProjectionMatrix * vertPos4;

    vec3 normal = normalize(normalInterp);
    vec3 lightDirection = normalize(lightPosition - vertPos);

    float nDotLight = max(dot(normal, lightDirection), 0.0);
    float specularLight = 0.0;
    if (nDotLight > 0.0) {
        vec3 viewDir = normalize(-vertPos);
        vec3 halfDir = normalize(lightDirection + viewDir);
        float specularAngle = max(dot(halfDir, normal), 0.0);
        specularLight = pow(specularAngle, shininess);
    }

    vec3 diffuse = nDotLight * diffuseColor;
    vec3 ambient = ambientColor;
    vec3 specular = specularLight * specularColor;

    mat4 rotateMat = getRotateMat(fAngleRad);
    mat4 translated = getTranslateMat(-fUserPoint);
    mat4 translatedBack = getTranslateMat(fUserPoint);

    vec4 tr = translated * vec4(textureCoords, 0, 0);
    vec4 rotated = tr * rotateMat;
    vec4 trBack = rotated * translatedBack;

    vTextureCoords = vec2(trBack);
    vTextureCoords = textureCoords;

    color = vec4(diffuse + ambient + specular, 1.0);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif

varying vec4 color;
varying vec2 vTextureCoords;
uniform sampler2D tmu;
uniform vec4 colorU;

void main() {
    vec4 texture = texture2D(tmu, vTextureCoords);
    gl_FragColor = texture * color;
    if (colorU.x > 0.5) {
        gl_FragColor = texture;
    }
}`;
